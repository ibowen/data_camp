/**Week 1: Use 3 methods to load yelp data into Hive1. Flattern json nesting and load the data as csv  https://gist.github.com/paulgb/52657672. Load as textfile but query using 'get_json_object' and 'JSON_TUPLE'  https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF3. Use JsonSerDe to load with schema.   https://github.com/rcongiu/Hive-JSON-Serde, check the Readme careful and mvn package with the right Hive version**/-- prepare filehadoop fs -mkdir /user/1604bowen/yelphadoop fs -mkdir /user/1604bowen/yelp/businesshadoop fs -put yelp*.csv /user/1604bowen/yelp/hadoop fs -ls /user/1604bowen/yelp/-- beeline connection!connect jdbc:hive2://192.168.1.33:10000/default!connect jdbc:hive2://localhost:10000 cloudera 1604bowen-- create databasesCREATE DATABASE IF NOT EXISTS bowen_db;-- select database and show tablesUSE bowen_db;SHOW TABLES;/**Method 1: SEDE jsonserd, will create table with schema-- mvn package serde mvn project: mvn -Pcdh5 clean package-- Warning: java 1.8 doesn't work with serde-- add jar json-serde-1.1.9.9-Hive13-jar-with-dependencies.jar-- the jar file should be input with path correctly, and ignore dir if in hive/bin folder**/-- beeline need jar to be in hdfsadd jar hdfs://master1.internal.datalaus.net:8020/user/1604bowen/lib/json-serde-1.3.8-SNAPSHOT-jar-with-dependencies.jar;-- userDROP TABLE yelp_train_user_json;CREATE EXTERNAL TABLE yelp_train_user_json (  user_id STRING,  type STRING,  name STRING,  review_count INT,  average_stars FLOAT,  votes MAP<STRING, STRING>) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'STORED AS textfileLOCATION '/user/1604bowen/yelp/user_json';select * from yelp_train_user_json limit 10;-- businessDROP TABLE yelp_train_business_json;CREATE EXTERNAL TABLE yelp_train_business_json (business_id STRING,type STRING,name STRING,full_address STRING,city STRING,state STRING,latitude DOUBLE,longitude DOUBLE,stars DOUBLE,review_count INT,open BOOLEAN,categories ARRAY<STRING>,neighborhoods ARRAY<STRING>) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'STORED AS textfileLOCATION '/user/1604bowen/yelp/business_json';select * from yelp_train_business_json limit 10;select type, business_id, name, neighborhoods, full_address, city, state from yelp_train_business_json limit 10;select latitude, longitude, stars, review_count, categories, open from yelp_train_business_json limit 10;-- review-- note date keyword should be wrapped by backtick ``DROP TABLE yelp_train_review_json;CREATE EXTERNAL TABLE yelp_train_review_json (user_id STRING,votes MAP<STRING, INT>,review_id STRING,stars STRING,`date` STRING,text STRING,type STRING,business_id STRING) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'STORED AS textfileLOCATION '/user/1604bowen/yelp/review_json';select * from yelp_train_review_json limit 10;select user_id, review_id, stars, `date`, type, business_id from yelp_train_review_json limit 10;select votes.useful, votes.funny, votes.cool from yelp_train_review_json limit 10;select votes from yelp_train_review_json limit 10;-- checkin-- note date keyword should be wrapped by backtick ``DROP TABLE yelp_train_checkin_json;CREATE EXTERNAL TABLE yelp_train_checkin_json (business_id STRING,type STRING,checkin_info MAP<STRING, INT>) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'STORED AS textfileLOCATION '/user/1604bowen/yelp/checkin_json';select type, business_id from yelp_train_checkin_json limit 10;select checkin_info from yelp_train_checkin_json limit 10;/***********************************************************************Method 2: Store json file directly into hive, and use UDF tuple to query**/-- businessDROP TABLE IF EXISTS yelp_train_business_json;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_business_json(        business STRING        )COMMENT 'This is the Yelp business table in JSON format'STORED AS textfilelocation '/user/1604bowen/yelp/business_json';-- userDROP TABLE IF EXISTS yelp_train_user_json;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_user_json(        user_ STRING        )COMMENT 'This is the Yelp user table in JSON format'STORED AS textfilelocation '/user/1604bowen/yelp/user_json';-- reviewDROP TABLE IF EXISTS yelp_train_review_json;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_review_json(        review STRING        )COMMENT 'This is the Yelp review table in JSON format'STORED AS textfilelocation '/user/1604bowen/yelp/review_json';-- checkinDROP TABLE IF EXISTS yelp_train_checkin_json;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_checkin_json(        checkin STRING        )COMMENT 'This is the Yelp checkin table in JSON format'STORED AS textfilelocation '/user/1604bowen/yelp/checkin_json';-- query using json tuple, more efficient to query multiple fields than json_object, -- but it needs multiple lateral viewSELECT u1.user_id, u1.name, u1.votes, u2.votes_funny, u2.votes_cool, u2.votes_useful  FROM yelp_train_user_json u  LATERAL VIEW JSON_TUPLE(u.user_, 'user_id', 'name', 'votes') u1    AS user_id, name, votes    LATERAL VIEW json_tuple(u1.votes, 'funny', 'cool', 'useful') u2    AS votes_funny, votes_cool, votes_useful    limit 100;-- query via json object, more convienient in query nested fieldsselect get_json_object(u.user_, '$.user_id'), get_json_object(u.user_, '$.votes.funny')   from yelp_train_user_json u limit 10;/**Method 3: Using python to convert json format into a flattened format stored in csv		  check the script named "convert_json2csv.ipynb"not recommended**/-- create business tableDROP TABLE IF EXISTS yelp_train_business;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_business(        business_id STRING,        categories STRING,        city STRING,        full_address STRING,        latitude STRING,        longitude STRING,        name STRING,        neighborhoods STRING,        open BOOLEAN,        review_count INT,        stars FLOAT,        state STRING,        type STRING        )COMMENT 'This is the Yelp business table'ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS textfilelocation '/user/1604bowen/yelp/business';-- create user tableDROP TABLE IF EXISTS yelp_train_user;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_user(        average_stars FLOAT,        name STRING,        review_count INT,        type STRING,        user_id STRING,        votes_cool INT,        votes_funny INT,        votes_useful INT        )COMMENT 'This is the Yelp user table'ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS textfilelocation '/user/1604bowen/yelp/user';-- create review tableDROP TABLE IF EXISTS yelp_train_review;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_review(        business_id STRING,        date_review STRING, -- change the name        review_id STRING,        stars FLOAT,        text STRING,        type STRING,        user_id STRING,        votes_cool INT,        votes_funny INT,        votes_useful INT        )COMMENT 'This is the Yelp review table'ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS textfilelocation '/user/1604bowen/yelp/review';-- create checkin table-- notice the tab which will cause the error-- '-' will cause error because it's the operation symbolDROP TABLE IF EXISTS yelp_train_checkin;CREATE EXTERNAL TABLE IF NOT EXISTS yelp_train_checkin(business_id STRING,checkin_info_0_0 STRING,checkin_info_0_1 STRING,checkin_info_0_2 STRING,checkin_info_0_3 STRING,checkin_info_0_4 STRING,checkin_info_0_5 STRING,checkin_info_0_6 STRING,checkin_info_1_0 STRING,checkin_info_1_1 STRING,checkin_info_1_2 STRING,checkin_info_1_3 STRING,checkin_info_1_4 STRING,checkin_info_1_5 STRING,checkin_info_1_6 STRING,checkin_info_10_0 STRING,checkin_info_10_1 STRING,checkin_info_10_2 STRING,checkin_info_10_3 STRING,checkin_info_10_4 STRING,checkin_info_10_5 STRING,checkin_info_10_6 STRING,checkin_info_11_0 STRING,checkin_info_11_1 STRING,checkin_info_11_2 STRING,checkin_info_11_3 STRING,checkin_info_11_4 STRING,checkin_info_11_5 STRING,checkin_info_11_6 STRING,checkin_info_12_0 STRING,checkin_info_12_1 STRING,checkin_info_12_2 STRING,checkin_info_12_3 STRING,checkin_info_12_4 STRING,checkin_info_12_5 STRING,checkin_info_12_6 STRING,checkin_info_13_0 STRING,checkin_info_13_1 STRING,checkin_info_13_2 STRING,checkin_info_13_3 STRING,checkin_info_13_4 STRING,checkin_info_13_5 STRING,checkin_info_13_6 STRING,checkin_info_14_0 STRING,checkin_info_14_1 STRING,checkin_info_14_2 STRING,checkin_info_14_3 STRING,checkin_info_14_4 STRING,checkin_info_14_5 STRING,checkin_info_14_6 STRING,checkin_info_15_0 STRING,checkin_info_15_1 STRING,checkin_info_15_2 STRING,checkin_info_15_3 STRING,checkin_info_15_4 STRING,checkin_info_15_5 STRING,checkin_info_15_6 STRING,checkin_info_16_0 STRING,checkin_info_16_1 STRING,checkin_info_16_2 STRING,checkin_info_16_3 STRING,checkin_info_16_4 STRING,checkin_info_16_5 STRING,checkin_info_16_6 STRING,checkin_info_17_0 STRING,checkin_info_17_1 STRING,checkin_info_17_2 STRING,checkin_info_17_3 STRING,checkin_info_17_4 STRING,checkin_info_17_5 STRING,checkin_info_17_6 STRING,checkin_info_18_0 STRING,checkin_info_18_1 STRING,checkin_info_18_2 STRING,checkin_info_18_3 STRING,checkin_info_18_4 STRING,checkin_info_18_5 STRING,checkin_info_18_6 STRING,checkin_info_19_0 STRING,checkin_info_19_1 STRING,checkin_info_19_2 STRING,checkin_info_19_3 STRING,checkin_info_19_4 STRING,checkin_info_19_5 STRING,checkin_info_19_6 STRING,checkin_info_2_0 STRING,checkin_info_2_1 STRING,checkin_info_2_2 STRING,checkin_info_2_3 STRING,checkin_info_2_4 STRING,checkin_info_2_5 STRING,checkin_info_2_6 STRING,checkin_info_20_0 STRING,checkin_info_20_1 STRING,checkin_info_20_2 STRING,checkin_info_20_3 STRING,checkin_info_20_4 STRING,checkin_info_20_5 STRING,checkin_info_20_6 STRING,checkin_info_21_0 STRING,checkin_info_21_1 STRING,checkin_info_21_2 STRING,checkin_info_21_3 STRING,checkin_info_21_4 STRING,checkin_info_21_5 STRING,checkin_info_21_6 STRING,checkin_info_22_0 STRING,checkin_info_22_1 STRING,checkin_info_22_2 STRING,checkin_info_22_3 STRING,checkin_info_22_4 STRING,checkin_info_22_5 STRING,checkin_info_22_6 STRING,checkin_info_23_0 STRING,checkin_info_23_1 STRING,checkin_info_23_2 STRING,checkin_info_23_3 STRING,checkin_info_23_4 STRING,checkin_info_23_5 STRING,checkin_info_23_6 STRING,checkin_info_3_0 STRING,checkin_info_3_1 STRING,checkin_info_3_2 STRING,checkin_info_3_3 STRING,checkin_info_3_4 STRING,checkin_info_3_5 STRING,checkin_info_3_6 STRING,checkin_info_4_0 STRING,checkin_info_4_1 STRING,checkin_info_4_2 STRING,checkin_info_4_3 STRING,checkin_info_4_4 STRING,checkin_info_4_5 STRING,checkin_info_4_6 STRING,checkin_info_5_0 STRING,checkin_info_5_1 STRING,checkin_info_5_2 STRING,checkin_info_5_3 STRING,checkin_info_5_4 STRING,checkin_info_5_5 STRING,checkin_info_5_6 STRING,checkin_info_6_0 STRING,checkin_info_6_1 STRING,checkin_info_6_2 STRING,checkin_info_6_3 STRING,checkin_info_6_4 STRING,checkin_info_6_5 STRING,checkin_info_6_6 STRING,checkin_info_7_0 STRING,checkin_info_7_1 STRING,checkin_info_7_2 STRING,checkin_info_7_3 STRING,checkin_info_7_4 STRING,checkin_info_7_5 STRING,checkin_info_7_6 STRING,checkin_info_8_0 STRING,checkin_info_8_1 STRING,checkin_info_8_2 STRING,checkin_info_8_3 STRING,checkin_info_8_4 STRING,checkin_info_8_5 STRING,checkin_info_8_6 STRING,checkin_info_9_0 STRING,checkin_info_9_1 STRING,checkin_info_9_2 STRING,checkin_info_9_3 STRING,checkin_info_9_4 STRING,checkin_info_9_5 STRING,checkin_info_9_6 STRING,type STRING        )COMMENT 'This is the Yelp checkin table'ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS textfilelocation '/user/1604bowen/yelp/checkin';